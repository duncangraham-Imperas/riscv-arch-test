// RISC-V Compliance Test I-AES32ESMI-01
//
#
# Copyright (c) 2021 Imperas Software Ltd., www.imperas.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
#

//
// Specification: K Crypto/Scalar
// Description: Testing instruction 'aes32esmi'.

#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA(RV32IK)

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN






#ifdef TEST_CASE_1


    # address for test results
    # la x6, test_1_res
    RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x6,signature_1_0)
 
    # Testcase 0:  rs1:x31(0x10fd3dedadea5195), rs2:x16(0xdf7f3844121bcc23), imm:0x3, result rd:x1(0x24aa985c)
    # li  x16, MASK_XLEN(0xdf7f3844121bcc23)
    # li  x31, MASK_XLEN(0x10fd3dedadea5195)
    # aes32esmi x1, x31, x16, 0x3
    # sw x1, 0(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x1, 0x24aa985c) 
inst_0:
    TEST_RRI_OP(aes32esmi, x1, x31, x16, 0x3, 0x24aa985c, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x6, 0, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x1, 0x24aa985c) 

 
    # Testcase 1:  rs1:x30(0xbd295ce2d2ffbec1), rs2:x15(0xf5adb41aa47d105b), imm:0x3, result rd:x2(0x4024f788)
    # li  x15, MASK_XLEN(0xf5adb41aa47d105b)
    # li  x30, MASK_XLEN(0xbd295ce2d2ffbec1)
    # aes32esmi x2, x30, x15, 0x3
    # sw x2, 4(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x2, 0x4024f788) 
inst_1:
    TEST_RRI_OP(aes32esmi, x2, x30, x15, 0x3, 0x4024f788, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x6, 4, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x4024f788) 

 
    # Testcase 2:  rs1:x29(0xc9649f05a8e1a8bb), rs2:x14(0x82f6747f707af2c0), imm:0x0, result rd:x3(0x7d5b12d4)
    # li  x14, MASK_XLEN(0x82f6747f707af2c0)
    # li  x29, MASK_XLEN(0xc9649f05a8e1a8bb)
    # aes32esmi x3, x29, x14, 0x0
    # sw x3, 8(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x3, 0x7d5b12d4) 
inst_2:
    TEST_RRI_OP(aes32esmi, x3, x29, x14, 0x0, 0x7d5b12d4, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x6, 8, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x7d5b12d4) 

 
    # Testcase 3:  rs1:x28(0x3541291848c99fcb), rs2:x13(0x73a92fd4e19bfbc3), imm:0x3, result rd:x4(0xa3da6733)
    # li  x13, MASK_XLEN(0x73a92fd4e19bfbc3)
    # li  x28, MASK_XLEN(0x3541291848c99fcb)
    # aes32esmi x4, x28, x13, 0x3
    # sw x4, 12(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x4, 0xa3da6733) 
inst_3:
    TEST_RRI_OP(aes32esmi, x4, x28, x13, 0x3, 0xa3da6733, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x6, 12, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0xa3da6733) 

 
    # Testcase 4:  rs1:x27(0x10a24740461d524f), rs2:x12(0x546b0e54528a10af), imm:0x3, result rd:x5(0x461d524f)
    # li  x12, MASK_XLEN(0x546b0e54528a10af)
    # li  x27, MASK_XLEN(0x10a24740461d524f)
    # aes32esmi x5, x27, x12, 0x3
    # sw x5, 16(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x5, 0x461d524f) 
inst_4:
    TEST_RRI_OP(aes32esmi, x5, x27, x12, 0x3, 0x461d524f, 0x10a24740461d524f, 0x546b0e54528a10af, x6, 16, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x461d524f) 





    # address for test results
    # la x1, test_2_res
    RVTEST_CASE(1,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_2_0)
 
    # Testcase 5:  rs1:x26(0x546b0e54528a10af), rs2:x11(0x10a24740461d524f), imm:0x3, result rd:x6(0xe6644af5)
    # li  x11, MASK_XLEN(0x10a24740461d524f)
    # li  x26, MASK_XLEN(0x546b0e54528a10af)
    # aes32esmi x6, x26, x11, 0x3
    # sw x6, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x6, 0xe6644af5) 
inst_5:
    TEST_RRI_OP(aes32esmi, x6, x26, x11, 0x3, 0xe6644af5, 0x546b0e54528a10af, 0x10a24740461d524f, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xe6644af5) 

 
    # Testcase 6:  rs1:x25(0x73a92fd4e19bfbc3), rs2:x10(0x3541291848c99fcb), imm:0x3, result rd:x7(0x456da991)
    # li  x10, MASK_XLEN(0x3541291848c99fcb)
    # li  x25, MASK_XLEN(0x73a92fd4e19bfbc3)
    # aes32esmi x7, x25, x10, 0x3
    # sw x7, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x7, 0x456da991) 
inst_6:
    TEST_RRI_OP(aes32esmi, x7, x25, x10, 0x3, 0x456da991, 0x73a92fd4e19bfbc3, 0x3541291848c99fcb, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x456da991) 

 
    # Testcase 7:  rs1:x24(0x82f6747f707af2c0), rs2:x9(0xc9649f05a8e1a8bb), imm:0x3, result rd:x8(0xef273002)
    # li  x9, MASK_XLEN(0xc9649f05a8e1a8bb)
    # li  x24, MASK_XLEN(0x82f6747f707af2c0)
    # aes32esmi x8, x24, x9, 0x3
    # sw x8, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x8, 0xef273002) 
inst_7:
    TEST_RRI_OP(aes32esmi, x8, x24, x9, 0x3, 0xef273002, 0x82f6747f707af2c0, 0xc9649f05a8e1a8bb, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xef273002) 

 
    # Testcase 8:  rs1:x23(0xf5adb41aa47d105b), rs2:x8(0xbd295ce2d2ffbec1), imm:0x1, result rd:x9(0x0ad357b2)
    # li  x8, MASK_XLEN(0xbd295ce2d2ffbec1)
    # li  x23, MASK_XLEN(0xf5adb41aa47d105b)
    # aes32esmi x9, x23, x8, 0x1
    # sw x9, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x9, 0x0ad357b2) 
inst_8:
    TEST_RRI_OP(aes32esmi, x9, x23, x8, 0x1, 0x0ad357b2, 0xf5adb41aa47d105b, 0xbd295ce2d2ffbec1, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0ad357b2) 

 
    # Testcase 9:  rs1:x22(0xdf7f3844121bcc23), rs2:x7(0x10fd3dedadea5195), imm:0x1, result rd:x10(0xc3ca754b)
    # li  x7, MASK_XLEN(0x10fd3dedadea5195)
    # li  x22, MASK_XLEN(0xdf7f3844121bcc23)
    # aes32esmi x10, x22, x7, 0x1
    # sw x10, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x10, 0xc3ca754b) 
inst_9:
    TEST_RRI_OP(aes32esmi, x10, x22, x7, 0x1, 0xc3ca754b, 0xdf7f3844121bcc23, 0x10fd3dedadea5195, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xc3ca754b) 





    # address for test results
    # la x1, test_3_res
    RVTEST_CASE(2,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_3_0)
 
    # Testcase 10:  rs1:x21(0x00000001), rs2:x6(0xffffffff), imm:0x3, result rd:x11(0x2c3a1617)
    # li  x6, MASK_XLEN(0xffffffff)
    # li  x21, MASK_XLEN(0x1)
    # aes32esmi x11, x21, x6, 0x3
    # sw x11, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x11, 0x2c3a1617) 
inst_10:
    TEST_RRI_OP(aes32esmi, x11, x21, x6, 0x3, 0x2c3a1617, 0x1, 0xffffffff, x1, 0, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x11, 0x2c3a1617) 

 
    # Testcase 11:  rs1:x20(0x00000002), rs2:x5(0x7fffffff), imm:0x1, result rd:x12(0x16162c38)
    # li  x5, MASK_XLEN(0x7fffffff)
    # li  x20, MASK_XLEN(0x2)
    # aes32esmi x12, x20, x5, 0x1
    # sw x12, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x12, 0x16162c38) 
inst_11:
    TEST_RRI_OP(aes32esmi, x12, x20, x5, 0x1, 0x16162c38, 0x2, 0x7fffffff, x1, 4, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x16162c38) 

 
    # Testcase 12:  rs1:x19(0x00000004), rs2:x4(0xbfffffff), imm:0x2, result rd:x13(0x162c3a12)
    # li  x4, MASK_XLEN(0xbfffffff)
    # li  x19, MASK_XLEN(0x4)
    # aes32esmi x13, x19, x4, 0x2
    # sw x13, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x13, 0x162c3a12) 
inst_12:
    TEST_RRI_OP(aes32esmi, x13, x19, x4, 0x2, 0x162c3a12, 0x4, 0xbfffffff, x1, 8, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x162c3a12) 

 
    # Testcase 13:  rs1:x18(0x00000008), rs2:x3(0xdfffffff), imm:0x0, result rd:x14(0x3a161624)
    # li  x3, MASK_XLEN(0xdfffffff)
    # li  x18, MASK_XLEN(0x8)
    # aes32esmi x14, x18, x3, 0x0
    # sw x14, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x14, 0x3a161624) 
inst_13:
    TEST_RRI_OP(aes32esmi, x14, x18, x3, 0x0, 0x3a161624, 0x8, 0xdfffffff, x1, 12, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x3a161624) 

 
    # Testcase 14:  rs1:x17(0x00000010), rs2:x2(0xefffffff), imm:0x2, result rd:x15(0x162c3a06)
    # li  x2, MASK_XLEN(0xefffffff)
    # li  x17, MASK_XLEN(0x10)
    # aes32esmi x15, x17, x2, 0x2
    # sw x15, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x15, 0x162c3a06) 
inst_14:
    TEST_RRI_OP(aes32esmi, x15, x17, x2, 0x2, 0x162c3a06, 0x10, 0xefffffff, x1, 16, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x162c3a06) 





    # address for test results
    # la x2, test_4_res
    RVTEST_CASE(3,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x2,signature_4_0)
 
    # Testcase 15:  rs1:x16(0x00000020), rs2:x1(0xf7ffffff), imm:0x1, result rd:x16(0x16162c1a)
    # li  x1, MASK_XLEN(0xf7ffffff)
    # li  x16, MASK_XLEN(0x20)
    # aes32esmi x16, x16, x1, 0x1
    # sw x16, 0(x2)
    # RVTEST_IO_ASSERT_GPR_EQ(x3, x16, 0x16162c1a) 
inst_15:
    TEST_RRI_OP(aes32esmi, x16, x16, x1, 0x1, 0x16162c1a, 0x20, 0xf7ffffff, x2, 0, x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x16, 0x16162c1a) 

 
    # Testcase 16:  rs1:x15(0x00000040), rs2:x31(0xfbffffff), imm:0x3, result rd:x17(0x1e110f4f)
    # li  x31, MASK_XLEN(0xfbffffff)
    # li  x15, MASK_XLEN(0x40)
    # aes32esmi x17, x15, x31, 0x3
    # sw x17, 4(x2)
    # RVTEST_IO_ASSERT_GPR_EQ(x3, x17, 0x1e110f4f) 
inst_16:
    TEST_RRI_OP(aes32esmi, x17, x15, x31, 0x3, 0x1e110f4f, 0x40, 0xfbffffff, x2, 4, x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x17, 0x1e110f4f) 

 
    # Testcase 17:  rs1:x14(0x00000080), rs2:x30(0xfdffffff), imm:0x3, result rd:x18(0xa8fc54d4)
    # li  x30, MASK_XLEN(0xfdffffff)
    # li  x14, MASK_XLEN(0x80)
    # aes32esmi x18, x14, x30, 0x3
    # sw x18, 8(x2)
    # RVTEST_IO_ASSERT_GPR_EQ(x3, x18, 0xa8fc54d4) 
inst_17:
    TEST_RRI_OP(aes32esmi, x18, x14, x30, 0x3, 0xa8fc54d4, 0x80, 0xfdffffff, x2, 8, x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x18, 0xa8fc54d4) 

 
    # Testcase 18:  rs1:x13(0x00000100), rs2:x29(0xfeffffff), imm:0x0, result rd:x19(0x3a16172c)
    # li  x29, MASK_XLEN(0xfeffffff)
    # li  x13, MASK_XLEN(0x100)
    # aes32esmi x19, x13, x29, 0x0
    # sw x19, 12(x2)
    # RVTEST_IO_ASSERT_GPR_EQ(x3, x19, 0x3a16172c) 
inst_18:
    TEST_RRI_OP(aes32esmi, x19, x13, x29, 0x0, 0x3a16172c, 0x100, 0xfeffffff, x2, 12, x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x19, 0x3a16172c) 

 
    # Testcase 19:  rs1:x12(0x00000200), rs2:x28(0xff7fffff), imm:0x3, result rd:x20(0x2c3a1416)
    # li  x28, MASK_XLEN(0xff7fffff)
    # li  x12, MASK_XLEN(0x200)
    # aes32esmi x20, x12, x28, 0x3
    # sw x20, 16(x2)
    # RVTEST_IO_ASSERT_GPR_EQ(x3, x20, 0x2c3a1416) 
inst_19:
    TEST_RRI_OP(aes32esmi, x20, x12, x28, 0x3, 0x2c3a1416, 0x200, 0xff7fffff, x2, 16, x3)
    RVMODEL_IO_ASSERT_GPR_EQ(x3, x20, 0x2c3a1416) 





    # address for test results
    # la x1, test_5_res
    RVTEST_CASE(4,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_5_0)
 
    # Testcase 20:  rs1:x11(0x00000400), rs2:x27(0xffbfffff), imm:0x3, result rd:x21(0x2c3a1216)
    # li  x27, MASK_XLEN(0xffbfffff)
    # li  x11, MASK_XLEN(0x400)
    # aes32esmi x21, x11, x27, 0x3
    # sw x21, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x21, 0x2c3a1216) 
inst_20:
    TEST_RRI_OP(aes32esmi, x21, x11, x27, 0x3, 0x2c3a1216, 0x400, 0xffbfffff, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x2c3a1216) 

 
    # Testcase 21:  rs1:x10(0x00000800), rs2:x26(0xffdfffff), imm:0x3, result rd:x22(0x2c3a1e16)
    # li  x26, MASK_XLEN(0xffdfffff)
    # li  x10, MASK_XLEN(0x800)
    # aes32esmi x22, x10, x26, 0x3
    # sw x22, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x22, 0x2c3a1e16) 
inst_21:
    TEST_RRI_OP(aes32esmi, x22, x10, x26, 0x3, 0x2c3a1e16, 0x800, 0xffdfffff, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x2c3a1e16) 

 
    # Testcase 22:  rs1:x9(0x00001000), rs2:x25(0xffefffff), imm:0x3, result rd:x23(0x2c3a0616)
    # li  x25, MASK_XLEN(0xffefffff)
    # li  x9, MASK_XLEN(0x1000)
    # aes32esmi x23, x9, x25, 0x3
    # sw x23, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x23, 0x2c3a0616) 
inst_22:
    TEST_RRI_OP(aes32esmi, x23, x9, x25, 0x3, 0x2c3a0616, 0x1000, 0xffefffff, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x2c3a0616) 

 
    # Testcase 23:  rs1:x8(0x00002000), rs2:x24(0xfff7ffff), imm:0x3, result rd:x24(0x2c3a3616)
    # li  x24, MASK_XLEN(0xfff7ffff)
    # li  x8, MASK_XLEN(0x2000)
    # aes32esmi x24, x8, x24, 0x3
    # sw x24, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x24, 0x2c3a3616) 
inst_23:
    TEST_RRI_OP(aes32esmi, x24, x8, x24, 0x3, 0x2c3a3616, 0x2000, 0xfff7ffff, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x2c3a3616) 

 
    # Testcase 24:  rs1:x7(0x00004000), rs2:x23(0xfffbffff), imm:0x1, result rd:x25(0x16166c3a)
    # li  x23, MASK_XLEN(0xfffbffff)
    # li  x7, MASK_XLEN(0x4000)
    # aes32esmi x25, x7, x23, 0x1
    # sw x25, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x25, 0x16166c3a) 
inst_24:
    TEST_RRI_OP(aes32esmi, x25, x7, x23, 0x1, 0x16166c3a, 0x4000, 0xfffbffff, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x16166c3a) 





    # address for test results
    # la x1, test_6_res
    RVTEST_CASE(5,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_6_0)
 
    # Testcase 25:  rs1:x6(0x00008000), rs2:x22(0xfffdffff), imm:0x1, result rd:x26(0x1616ac3a)
    # li  x22, MASK_XLEN(0xfffdffff)
    # li  x6, MASK_XLEN(0x8000)
    # aes32esmi x26, x6, x22, 0x1
    # sw x26, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x26, 0x1616ac3a) 
inst_25:
    TEST_RRI_OP(aes32esmi, x26, x6, x22, 0x1, 0x1616ac3a, 0x8000, 0xfffdffff, x1, 0, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x26, 0x1616ac3a) 

 
    # Testcase 26:  rs1:x5(0x00010000), rs2:x21(0xfffeffff), imm:0x3, result rd:x27(0x2c3b1616)
    # li  x21, MASK_XLEN(0xfffeffff)
    # li  x5, MASK_XLEN(0x10000)
    # aes32esmi x27, x5, x21, 0x3
    # sw x27, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x27, 0x2c3b1616) 
inst_26:
    TEST_RRI_OP(aes32esmi, x27, x5, x21, 0x3, 0x2c3b1616, 0x10000, 0xfffeffff, x1, 4, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x27, 0x2c3b1616) 

 
    # Testcase 27:  rs1:x4(0x00020000), rs2:x20(0xffff7fff), imm:0x1, result rd:x28(0xd2d0bf6d)
    # li  x20, MASK_XLEN(0xffff7fff)
    # li  x4, MASK_XLEN(0x20000)
    # aes32esmi x28, x4, x20, 0x1
    # sw x28, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x28, 0xd2d0bf6d) 
inst_27:
    TEST_RRI_OP(aes32esmi, x28, x4, x20, 0x1, 0xd2d0bf6d, 0x20000, 0xffff7fff, x1, 8, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x28, 0xd2d0bf6d) 

 
    # Testcase 28:  rs1:x3(0x00040000), rs2:x19(0xffffbfff), imm:0x2, result rd:x29(0x16283a16)
    # li  x19, MASK_XLEN(0xffffbfff)
    # li  x3, MASK_XLEN(0x40000)
    # aes32esmi x29, x3, x19, 0x2
    # sw x29, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x29, 0x16283a16) 
inst_28:
    TEST_RRI_OP(aes32esmi, x29, x3, x19, 0x2, 0x16283a16, 0x40000, 0xffffbfff, x1, 12, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x29, 0x16283a16) 

 
    # Testcase 29:  rs1:x2(0x00080000), rs2:x18(0xffffdfff), imm:0x0, result rd:x30(0x3a1e162c)
    # li  x18, MASK_XLEN(0xffffdfff)
    # li  x2, MASK_XLEN(0x80000)
    # aes32esmi x30, x2, x18, 0x0
    # sw x30, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x30, 0x3a1e162c) 
inst_29:
    TEST_RRI_OP(aes32esmi, x30, x2, x18, 0x0, 0x3a1e162c, 0x80000, 0xffffdfff, x1, 16, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x30, 0x3a1e162c) 





    # address for test results
    # la x5, test_7_res
    RVTEST_CASE(6,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x5,signature_7_0)
 
    # Testcase 30:  rs1:x1(0x00100000), rs2:x17(0xffffefff), imm:0x2, result rd:x31(0x163c3a16)
    # li  x17, MASK_XLEN(0xffffefff)
    # li  x1, MASK_XLEN(0x100000)
    # aes32esmi x31, x1, x17, 0x2
    # sw x31, 0(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x31, 0x163c3a16) 
inst_30:
    TEST_RRI_OP(aes32esmi, x31, x1, x17, 0x2, 0x163c3a16, 0x100000, 0xffffefff, x5, 0, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x163c3a16) 

 
    # Testcase 31:  rs1:x31(0x00200000), rs2:x16(0xfffff7ff), imm:0x1, result rd:x1(0x6848d0b8)
    # li  x16, MASK_XLEN(0xfffff7ff)
    # li  x31, MASK_XLEN(0x200000)
    # aes32esmi x1, x31, x16, 0x1
    # sw x1, 4(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x1, 0x6848d0b8) 
inst_31:
    TEST_RRI_OP(aes32esmi, x1, x31, x16, 0x1, 0x6848d0b8, 0x200000, 0xfffff7ff, x5, 4, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x6848d0b8) 

 
    # Testcase 32:  rs1:x30(0x00400000), rs2:x15(0xfffffbff), imm:0x3, result rd:x2(0x2c7a1616)
    # li  x15, MASK_XLEN(0xfffffbff)
    # li  x30, MASK_XLEN(0x400000)
    # aes32esmi x2, x30, x15, 0x3
    # sw x2, 8(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x2, 0x2c7a1616) 
inst_32:
    TEST_RRI_OP(aes32esmi, x2, x30, x15, 0x3, 0x2c7a1616, 0x400000, 0xfffffbff, x5, 8, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x2, 0x2c7a1616) 

 
    # Testcase 33:  rs1:x29(0x00800000), rs2:x14(0xfffffdff), imm:0x3, result rd:x3(0x2cba1616)
    # li  x14, MASK_XLEN(0xfffffdff)
    # li  x29, MASK_XLEN(0x800000)
    # aes32esmi x3, x29, x14, 0x3
    # sw x3, 12(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x3, 0x2cba1616) 
inst_33:
    TEST_RRI_OP(aes32esmi, x3, x29, x14, 0x3, 0x2cba1616, 0x800000, 0xfffffdff, x5, 12, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x3, 0x2cba1616) 

 
    # Testcase 34:  rs1:x28(0x01000000), rs2:x13(0xfffffeff), imm:0x0, result rd:x4(0x3b16162c)
    # li  x13, MASK_XLEN(0xfffffeff)
    # li  x28, MASK_XLEN(0x1000000)
    # aes32esmi x4, x28, x13, 0x0
    # sw x4, 16(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x4, 0x3b16162c) 
inst_34:
    TEST_RRI_OP(aes32esmi, x4, x28, x13, 0x0, 0x3b16162c, 0x1000000, 0xfffffeff, x5, 16, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x4, 0x3b16162c) 





    # address for test results
    # la x1, test_8_res
    RVTEST_CASE(7,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_8_0)
 
    # Testcase 35:  rs1:x27(0x02000000), rs2:x12(0xffffff7f), imm:0x3, result rd:x5(0x2e3a1616)
    # li  x12, MASK_XLEN(0xffffff7f)
    # li  x27, MASK_XLEN(0x2000000)
    # aes32esmi x5, x27, x12, 0x3
    # sw x5, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x5, 0x2e3a1616) 
inst_35:
    TEST_RRI_OP(aes32esmi, x5, x27, x12, 0x3, 0x2e3a1616, 0x2000000, 0xffffff7f, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x2e3a1616) 

 
    # Testcase 36:  rs1:x26(0x04000000), rs2:x11(0xffffffbf), imm:0x3, result rd:x6(0x283a1616)
    # li  x11, MASK_XLEN(0xffffffbf)
    # li  x26, MASK_XLEN(0x4000000)
    # aes32esmi x6, x26, x11, 0x3
    # sw x6, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x6, 0x283a1616) 
inst_36:
    TEST_RRI_OP(aes32esmi, x6, x26, x11, 0x3, 0x283a1616, 0x4000000, 0xffffffbf, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x283a1616) 

 
    # Testcase 37:  rs1:x25(0x08000000), rs2:x10(0xffffffdf), imm:0x3, result rd:x7(0x243a1616)
    # li  x10, MASK_XLEN(0xffffffdf)
    # li  x25, MASK_XLEN(0x8000000)
    # aes32esmi x7, x25, x10, 0x3
    # sw x7, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x7, 0x243a1616) 
inst_37:
    TEST_RRI_OP(aes32esmi, x7, x25, x10, 0x3, 0x243a1616, 0x8000000, 0xffffffdf, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x243a1616) 

 
    # Testcase 38:  rs1:x24(0x10000000), rs2:x9(0xffffffef), imm:0x3, result rd:x8(0x3c3a1616)
    # li  x9, MASK_XLEN(0xffffffef)
    # li  x24, MASK_XLEN(0x10000000)
    # aes32esmi x8, x24, x9, 0x3
    # sw x8, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x8, 0x3c3a1616) 
inst_38:
    TEST_RRI_OP(aes32esmi, x8, x24, x9, 0x3, 0x3c3a1616, 0x10000000, 0xffffffef, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x3c3a1616) 

 
    # Testcase 39:  rs1:x23(0x20000000), rs2:x8(0xfffffff7), imm:0x3, result rd:x9(0x0c3a1616)
    # li  x8, MASK_XLEN(0xfffffff7)
    # li  x23, MASK_XLEN(0x20000000)
    # aes32esmi x9, x23, x8, 0x3
    # sw x9, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x9, 0x0c3a1616) 
inst_39:
    TEST_RRI_OP(aes32esmi, x9, x23, x8, 0x3, 0x0c3a1616, 0x20000000, 0xfffffff7, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x0c3a1616) 





    # address for test results
    # la x1, test_9_res
    RVTEST_CASE(8,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_9_0)
 
    # Testcase 40:  rs1:x22(0x40000000), rs2:x7(0xfffffffb), imm:0x1, result rd:x10(0x56162c3a)
    # li  x7, MASK_XLEN(0xfffffffb)
    # li  x22, MASK_XLEN(0x40000000)
    # aes32esmi x10, x22, x7, 0x1
    # sw x10, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x10, 0x56162c3a) 
inst_40:
    TEST_RRI_OP(aes32esmi, x10, x22, x7, 0x1, 0x56162c3a, 0x40000000, 0xfffffffb, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x56162c3a) 

 
    # Testcase 41:  rs1:x21(0x80000000), rs2:x6(0xfffffffd), imm:0x1, result rd:x11(0x96162c3a)
    # li  x6, MASK_XLEN(0xfffffffd)
    # li  x21, MASK_XLEN(0x80000000)
    # aes32esmi x11, x21, x6, 0x1
    # sw x11, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x11, 0x96162c3a) 
inst_41:
    TEST_RRI_OP(aes32esmi, x11, x21, x6, 0x1, 0x96162c3a, 0x80000000, 0xfffffffd, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x96162c3a) 

 
    # Testcase 42:  rs1:x20(0x00000000), rs2:x5(0xfffffffe), imm:0x3, result rd:x12(0x2c3a1616)
    # li  x5, MASK_XLEN(0xfffffffe)
    # li  x20, MASK_XLEN(0x0)
    # aes32esmi x12, x20, x5, 0x3
    # sw x12, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x12, 0x2c3a1616) 
inst_42:
    TEST_RRI_OP(aes32esmi, x12, x20, x5, 0x3, 0x2c3a1616, 0x0, 0xfffffffe, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0x2c3a1616) 

 
    # Testcase 43:  rs1:x19(0xfffffffe), rs2:x4(0x00000000), imm:0x1, result rd:x13(0x9c9c395b)
    # li  x4, MASK_XLEN(0x0)
    # li  x19, MASK_XLEN(0xfffffffe)
    # aes32esmi x13, x19, x4, 0x1
    # sw x13, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x13, 0x9c9c395b) 
inst_43:
    TEST_RRI_OP(aes32esmi, x13, x19, x4, 0x1, 0x9c9c395b, 0xfffffffe, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0x9c9c395b) 

 
    # Testcase 44:  rs1:x18(0xfffffffd), rs2:x3(0x80000000), imm:0x2, result rd:x14(0x9c395a9e)
    # li  x3, MASK_XLEN(0x80000000)
    # li  x18, MASK_XLEN(0xfffffffd)
    # aes32esmi x14, x18, x3, 0x2
    # sw x14, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x14, 0x9c395a9e) 
inst_44:
    TEST_RRI_OP(aes32esmi, x14, x18, x3, 0x2, 0x9c395a9e, 0xfffffffd, 0x80000000, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x14, 0x9c395a9e) 





    # address for test results
    # la x3, test_10_res
    RVTEST_CASE(9,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x3,signature_10_0)
 
    # Testcase 45:  rs1:x17(0xfffffffb), rs2:x2(0x40000000), imm:0x0, result rd:x15(0x5a9c9c3d)
    # li  x2, MASK_XLEN(0x40000000)
    # li  x17, MASK_XLEN(0xfffffffb)
    # aes32esmi x15, x17, x2, 0x0
    # sw x15, 0(x3)
    # RVTEST_IO_ASSERT_GPR_EQ(x4, x15, 0x5a9c9c3d) 
inst_45:
    TEST_RRI_OP(aes32esmi, x15, x17, x2, 0x0, 0x5a9c9c3d, 0xfffffffb, 0x40000000, x3, 0, x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x15, 0x5a9c9c3d) 

 
    # Testcase 46:  rs1:x16(0xfffffff7), rs2:x1(0x20000000), imm:0x2, result rd:x16(0x9c395a94)
    # li  x1, MASK_XLEN(0x20000000)
    # li  x16, MASK_XLEN(0xfffffff7)
    # aes32esmi x16, x16, x1, 0x2
    # sw x16, 4(x3)
    # RVTEST_IO_ASSERT_GPR_EQ(x4, x16, 0x9c395a94) 
inst_46:
    TEST_RRI_OP(aes32esmi, x16, x16, x1, 0x2, 0x9c395a94, 0xfffffff7, 0x20000000, x3, 4, x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x16, 0x9c395a94) 

 
    # Testcase 47:  rs1:x15(0xffffffef), rs2:x31(0x10000000), imm:0x1, result rd:x17(0x9c9c394a)
    # li  x31, MASK_XLEN(0x10000000)
    # li  x15, MASK_XLEN(0xffffffef)
    # aes32esmi x17, x15, x31, 0x1
    # sw x17, 8(x3)
    # RVTEST_IO_ASSERT_GPR_EQ(x4, x17, 0x9c9c394a) 
inst_47:
    TEST_RRI_OP(aes32esmi, x17, x15, x31, 0x1, 0x9c9c394a, 0xffffffef, 0x10000000, x3, 8, x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x17, 0x9c9c394a) 

 
    # Testcase 48:  rs1:x14(0xffffffdf), rs2:x30(0x08000000), imm:0x3, result rd:x18(0x9fafcfef)
    # li  x30, MASK_XLEN(0x8000000)
    # li  x14, MASK_XLEN(0xffffffdf)
    # aes32esmi x18, x14, x30, 0x3
    # sw x18, 12(x3)
    # RVTEST_IO_ASSERT_GPR_EQ(x4, x18, 0x9fafcfef) 
inst_48:
    TEST_RRI_OP(aes32esmi, x18, x14, x30, 0x3, 0x9fafcfef, 0xffffffdf, 0x8000000, x3, 12, x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x18, 0x9fafcfef) 

 
    # Testcase 49:  rs1:x13(0xffffffbf), rs2:x29(0x04000000), imm:0x3, result rd:x19(0x00f20d4d)
    # li  x29, MASK_XLEN(0x4000000)
    # li  x13, MASK_XLEN(0xffffffbf)
    # aes32esmi x19, x13, x29, 0x3
    # sw x19, 16(x3)
    # RVTEST_IO_ASSERT_GPR_EQ(x4, x19, 0x00f20d4d) 
inst_49:
    TEST_RRI_OP(aes32esmi, x19, x13, x29, 0x3, 0x00f20d4d, 0xffffffbf, 0x4000000, x3, 16, x4)
    RVMODEL_IO_ASSERT_GPR_EQ(x4, x19, 0x00f20d4d) 





    # address for test results
    # la x1, test_11_res
    RVTEST_CASE(10,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_11_0)
 
    # Testcase 50:  rs1:x12(0xffffff7f), rs2:x28(0x02000000), imm:0x0, result rd:x20(0x5a9c9cb9)
    # li  x28, MASK_XLEN(0x2000000)
    # li  x12, MASK_XLEN(0xffffff7f)
    # aes32esmi x20, x12, x28, 0x0
    # sw x20, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x20, 0x5a9c9cb9) 
inst_50:
    TEST_RRI_OP(aes32esmi, x20, x12, x28, 0x0, 0x5a9c9cb9, 0xffffff7f, 0x2000000, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x5a9c9cb9) 

 
    # Testcase 51:  rs1:x11(0xfffffeff), rs2:x27(0x01000000), imm:0x3, result rd:x21(0x077b8283)
    # li  x27, MASK_XLEN(0x1000000)
    # li  x11, MASK_XLEN(0xfffffeff)
    # aes32esmi x21, x11, x27, 0x3
    # sw x21, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x21, 0x077b8283) 
inst_51:
    TEST_RRI_OP(aes32esmi, x21, x11, x27, 0x3, 0x077b8283, 0xfffffeff, 0x1000000, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x077b8283) 

 
    # Testcase 52:  rs1:x10(0xfffffdff), rs2:x26(0x00800000), imm:0x3, result rd:x22(0x395a9e9c)
    # li  x26, MASK_XLEN(0x800000)
    # li  x10, MASK_XLEN(0xfffffdff)
    # aes32esmi x22, x10, x26, 0x3
    # sw x22, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x22, 0x395a9e9c) 
inst_52:
    TEST_RRI_OP(aes32esmi, x22, x10, x26, 0x3, 0x395a9e9c, 0xfffffdff, 0x800000, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x395a9e9c) 

 
    # Testcase 53:  rs1:x9(0xfffffbff), rs2:x25(0x00400000), imm:0x3, result rd:x23(0x395a989c)
    # li  x25, MASK_XLEN(0x400000)
    # li  x9, MASK_XLEN(0xfffffbff)
    # aes32esmi x23, x9, x25, 0x3
    # sw x23, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x23, 0x395a989c) 
inst_53:
    TEST_RRI_OP(aes32esmi, x23, x9, x25, 0x3, 0x395a989c, 0xfffffbff, 0x400000, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x395a989c) 

 
    # Testcase 54:  rs1:x8(0xfffff7ff), rs2:x24(0x00200000), imm:0x3, result rd:x24(0x395a949c)
    # li  x24, MASK_XLEN(0x200000)
    # li  x8, MASK_XLEN(0xfffff7ff)
    # aes32esmi x24, x8, x24, 0x3
    # sw x24, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x24, 0x395a949c) 
inst_54:
    TEST_RRI_OP(aes32esmi, x24, x8, x24, 0x3, 0x395a949c, 0xfffff7ff, 0x200000, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x395a949c) 





    # address for test results
    # la x1, test_12_res
    RVTEST_CASE(11,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_12_0)
 
    # Testcase 55:  rs1:x7(0xffffefff), rs2:x23(0x00100000), imm:0x3, result rd:x25(0x395a8c9c)
    # li  x23, MASK_XLEN(0x100000)
    # li  x7, MASK_XLEN(0xffffefff)
    # aes32esmi x25, x7, x23, 0x3
    # sw x25, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x25, 0x395a8c9c) 
inst_55:
    TEST_RRI_OP(aes32esmi, x25, x7, x23, 0x3, 0x395a8c9c, 0xffffefff, 0x100000, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x395a8c9c) 

 
    # Testcase 56:  rs1:x6(0xffffdfff), rs2:x22(0x00080000), imm:0x1, result rd:x26(0x9c9c195a)
    # li  x22, MASK_XLEN(0x80000)
    # li  x6, MASK_XLEN(0xffffdfff)
    # aes32esmi x26, x6, x22, 0x1
    # sw x26, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x26, 0x9c9c195a) 
inst_56:
    TEST_RRI_OP(aes32esmi, x26, x6, x22, 0x1, 0x9c9c195a, 0xffffdfff, 0x80000, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x9c9c195a) 

 
    # Testcase 57:  rs1:x5(0xffffbfff), rs2:x21(0x00040000), imm:0x1, result rd:x27(0x9c9c795a)
    # li  x21, MASK_XLEN(0x40000)
    # li  x5, MASK_XLEN(0xffffbfff)
    # aes32esmi x27, x5, x21, 0x1
    # sw x27, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x27, 0x9c9c795a) 
inst_57:
    TEST_RRI_OP(aes32esmi, x27, x5, x21, 0x1, 0x9c9c795a, 0xffffbfff, 0x40000, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x9c9c795a) 

 
    # Testcase 58:  rs1:x4(0xffff7fff), rs2:x20(0x00020000), imm:0x3, result rd:x28(0x395a1c9c)
    # li  x20, MASK_XLEN(0x20000)
    # li  x4, MASK_XLEN(0xffff7fff)
    # aes32esmi x28, x4, x20, 0x3
    # sw x28, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x28, 0x395a1c9c) 
inst_58:
    TEST_RRI_OP(aes32esmi, x28, x4, x20, 0x3, 0x395a1c9c, 0xffff7fff, 0x20000, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0x395a1c9c) 

 
    # Testcase 59:  rs1:x3(0xfffeffff), rs2:x19(0x00010000), imm:0x1, result rd:x29(0x9c9d395a)
    # li  x19, MASK_XLEN(0x10000)
    # li  x3, MASK_XLEN(0xfffeffff)
    # aes32esmi x29, x3, x19, 0x1
    # sw x29, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x29, 0x9c9d395a) 
inst_59:
    TEST_RRI_OP(aes32esmi, x29, x3, x19, 0x1, 0x9c9d395a, 0xfffeffff, 0x10000, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x29, 0x9c9d395a) 





    # address for test results
    # la x4, test_13_res
    RVTEST_CASE(12,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x4,signature_13_0)
 
    # Testcase 60:  rs1:x2(0xfffdffff), rs2:x18(0x00008000), imm:0x2, result rd:x30(0x9c3b5a9c)
    # li  x18, MASK_XLEN(0x8000)
    # li  x2, MASK_XLEN(0xfffdffff)
    # aes32esmi x30, x2, x18, 0x2
    # sw x30, 0(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x30, 0x9c3b5a9c) 
inst_60:
    TEST_RRI_OP(aes32esmi, x30, x2, x18, 0x2, 0x9c3b5a9c, 0xfffdffff, 0x8000, x4, 0, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0x9c3b5a9c) 

 
    # Testcase 61:  rs1:x1(0xfffbffff), rs2:x17(0x00004000), imm:0x0, result rd:x31(0x5a989c39)
    # li  x17, MASK_XLEN(0x4000)
    # li  x1, MASK_XLEN(0xfffbffff)
    # aes32esmi x31, x1, x17, 0x0
    # sw x31, 4(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x31, 0x5a989c39) 
inst_61:
    TEST_RRI_OP(aes32esmi, x31, x1, x17, 0x0, 0x5a989c39, 0xfffbffff, 0x4000, x4, 4, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0x5a989c39) 

 
    # Testcase 62:  rs1:x31(0xfff7ffff), rs2:x16(0x00002000), imm:0x2, result rd:x1(0x9c315a9c)
    # li  x16, MASK_XLEN(0x2000)
    # li  x31, MASK_XLEN(0xfff7ffff)
    # aes32esmi x1, x31, x16, 0x2
    # sw x1, 8(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x1, 0x9c315a9c) 
inst_62:
    TEST_RRI_OP(aes32esmi, x1, x31, x16, 0x2, 0x9c315a9c, 0xfff7ffff, 0x2000, x4, 8, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0x9c315a9c) 

 
    # Testcase 63:  rs1:x30(0xffefffff), rs2:x15(0x00001000), imm:0x1, result rd:x2(0x352570ba)
    # li  x15, MASK_XLEN(0x1000)
    # li  x30, MASK_XLEN(0xffefffff)
    # aes32esmi x2, x30, x15, 0x1
    # sw x2, 12(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x2, 0x352570ba) 
inst_63:
    TEST_RRI_OP(aes32esmi, x2, x30, x15, 0x1, 0x352570ba, 0xffefffff, 0x1000, x4, 12, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0x352570ba) 

 
    # Testcase 64:  rs1:x29(0xffdfffff), rs2:x14(0x00000800), imm:0x3, result rd:x3(0x397a9c9c)
    # li  x14, MASK_XLEN(0x800)
    # li  x29, MASK_XLEN(0xffdfffff)
    # aes32esmi x3, x29, x14, 0x3
    # sw x3, 16(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x3, 0x397a9c9c) 
inst_64:
    TEST_RRI_OP(aes32esmi, x3, x29, x14, 0x3, 0x397a9c9c, 0xffdfffff, 0x800, x4, 16, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x3, 0x397a9c9c) 





    # address for test results
    # la x1, test_14_res
    RVTEST_CASE(13,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_14_0)
 
    # Testcase 65:  rs1:x28(0xffbfffff), rs2:x13(0x00000400), imm:0x3, result rd:x4(0x391a9c9c)
    # li  x13, MASK_XLEN(0x400)
    # li  x28, MASK_XLEN(0xffbfffff)
    # aes32esmi x4, x28, x13, 0x3
    # sw x4, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x4, 0x391a9c9c) 
inst_65:
    TEST_RRI_OP(aes32esmi, x4, x28, x13, 0x3, 0x391a9c9c, 0xffbfffff, 0x400, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0x391a9c9c) 

 
    # Testcase 66:  rs1:x27(0xff7fffff), rs2:x12(0x00000200), imm:0x0, result rd:x5(0x5a1c9c39)
    # li  x12, MASK_XLEN(0x200)
    # li  x27, MASK_XLEN(0xff7fffff)
    # aes32esmi x5, x27, x12, 0x0
    # sw x5, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x5, 0x5a1c9c39) 
inst_66:
    TEST_RRI_OP(aes32esmi, x5, x27, x12, 0x0, 0x5a1c9c39, 0xff7fffff, 0x200, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0x5a1c9c39) 

 
    # Testcase 67:  rs1:x26(0xfeffffff), rs2:x11(0x00000100), imm:0x0, result rd:x6(0x5b9c9c39)
    # li  x11, MASK_XLEN(0x100)
    # li  x26, MASK_XLEN(0xfeffffff)
    # aes32esmi x6, x26, x11, 0x0
    # sw x6, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x6, 0x5b9c9c39) 
inst_67:
    TEST_RRI_OP(aes32esmi, x6, x26, x11, 0x0, 0x5b9c9c39, 0xfeffffff, 0x100, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0x5b9c9c39) 

 
    # Testcase 68:  rs1:x25(0xfdffffff), rs2:x10(0x00000080), imm:0x0, result rd:x7(0xb132327e)
    # li  x10, MASK_XLEN(0x80)
    # li  x25, MASK_XLEN(0xfdffffff)
    # aes32esmi x7, x25, x10, 0x0
    # sw x7, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x7, 0xb132327e) 
inst_68:
    TEST_RRI_OP(aes32esmi, x7, x25, x10, 0x0, 0xb132327e, 0xfdffffff, 0x80, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xb132327e) 

 
    # Testcase 69:  rs1:x24(0xfbffffff), rs2:x9(0x00000040), imm:0x0, result rd:x8(0xe0f6f6ed)
    # li  x9, MASK_XLEN(0x40)
    # li  x24, MASK_XLEN(0xfbffffff)
    # aes32esmi x8, x24, x9, 0x0
    # sw x8, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x8, 0xe0f6f6ed) 
inst_69:
    TEST_RRI_OP(aes32esmi, x8, x24, x9, 0x0, 0xe0f6f6ed, 0xfbffffff, 0x40, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xe0f6f6ed) 





    # address for test results
    # la x1, test_15_res
    RVTEST_CASE(14,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_15_0)
 
    # Testcase 70:  rs1:x23(0xf7ffffff), rs2:x8(0x00000020), imm:0x0, result rd:x9(0x3548488a)
    # li  x8, MASK_XLEN(0x20)
    # li  x23, MASK_XLEN(0xf7ffffff)
    # aes32esmi x9, x23, x8, 0x0
    # sw x9, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x9, 0x3548488a) 
inst_70:
    TEST_RRI_OP(aes32esmi, x9, x23, x8, 0x0, 0x3548488a, 0xf7ffffff, 0x20, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x3548488a) 

 
    # Testcase 71:  rs1:x22(0xefffffff), rs2:x7(0x00000010), imm:0x0, result rd:x10(0xaa353570)
    # li  x7, MASK_XLEN(0x10)
    # li  x22, MASK_XLEN(0xefffffff)
    # aes32esmi x10, x22, x7, 0x0
    # sw x10, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x10, 0xaa353570) 
inst_71:
    TEST_RRI_OP(aes32esmi, x10, x22, x7, 0x0, 0xaa353570, 0xefffffff, 0x10, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xaa353570) 

 
    # Testcase 72:  rs1:x21(0xdfffffff), rs2:x6(0x00000008), imm:0x0, result rd:x11(0x8fcfcf9f)
    # li  x6, MASK_XLEN(0x8)
    # li  x21, MASK_XLEN(0xdfffffff)
    # aes32esmi x11, x21, x6, 0x0
    # sw x11, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x11, 0x8fcfcf9f) 
inst_72:
    TEST_RRI_OP(aes32esmi, x11, x21, x6, 0x0, 0x8fcfcf9f, 0xdfffffff, 0x8, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x8fcfcf9f) 

 
    # Testcase 73:  rs1:x20(0xbfffffff), rs2:x5(0x00000004), imm:0x0, result rd:x12(0xb20d0d00)
    # li  x5, MASK_XLEN(0x4)
    # li  x20, MASK_XLEN(0xbfffffff)
    # aes32esmi x12, x20, x5, 0x0
    # sw x12, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x12, 0xb20d0d00) 
inst_73:
    TEST_RRI_OP(aes32esmi, x12, x20, x5, 0x0, 0xb20d0d00, 0xbfffffff, 0x4, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xb20d0d00) 

 
    # Testcase 74:  rs1:x19(0x7fffffff), rs2:x4(0x00000002), imm:0x0, result rd:x13(0xe6888811)
    # li  x4, MASK_XLEN(0x2)
    # li  x19, MASK_XLEN(0x7fffffff)
    # aes32esmi x13, x19, x4, 0x0
    # sw x13, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x13, 0xe6888811) 
inst_74:
    TEST_RRI_OP(aes32esmi, x13, x19, x4, 0x0, 0xe6888811, 0x7fffffff, 0x2, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x13, 0xe6888811) 





    # address for test results
    # la x4, test_16_res
    RVTEST_CASE(15,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x4,signature_16_0)
 
    # Testcase 75:  rs1:x18(0xffffffff), rs2:x3(0x00000001), imm:0x0, result rd:x14(0x7b838307)
    # li  x3, MASK_XLEN(0x1)
    # li  x18, MASK_XLEN(0xffffffff)
    # aes32esmi x14, x18, x3, 0x0
    # sw x14, 0(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x14, 0x7b838307) 
inst_75:
    TEST_RRI_OP(aes32esmi, x14, x18, x3, 0x0, 0x7b838307, 0xffffffff, 0x1, x4, 0, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x14, 0x7b838307) 

 
    # Testcase 76:  rs1:x17(0x00000001), rs2:x2(0x00000000), imm:0x0, result rd:x15(0xa56363c7)
    # li  x2, MASK_XLEN(0x0)
    # li  x17, MASK_XLEN(0x1)
    # aes32esmi x15, x17, x2, 0x0
    # sw x15, 4(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x15, 0xa56363c7) 
inst_76:
    TEST_RRI_OP(aes32esmi, x15, x17, x2, 0x0, 0xa56363c7, 0x1, 0x0, x4, 4, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x15, 0xa56363c7) 

 
    # Testcase 77:  rs1:x16(0x00000002), rs2:x1(0x00000000), imm:0x0, result rd:x16(0xa56363c4)
    # li  x1, MASK_XLEN(0x0)
    # li  x16, MASK_XLEN(0x2)
    # aes32esmi x16, x16, x1, 0x0
    # sw x16, 8(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x16, 0xa56363c4) 
inst_77:
    TEST_RRI_OP(aes32esmi, x16, x16, x1, 0x0, 0xa56363c4, 0x2, 0x0, x4, 8, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x16, 0xa56363c4) 

 
    # Testcase 78:  rs1:x15(0x00000004), rs2:x31(0x00000000), imm:0x0, result rd:x17(0xa56363c2)
    # li  x31, MASK_XLEN(0x0)
    # li  x15, MASK_XLEN(0x4)
    # aes32esmi x17, x15, x31, 0x0
    # sw x17, 12(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x17, 0xa56363c2) 
inst_78:
    TEST_RRI_OP(aes32esmi, x17, x15, x31, 0x0, 0xa56363c2, 0x4, 0x0, x4, 12, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x17, 0xa56363c2) 

 
    # Testcase 79:  rs1:x14(0x00000008), rs2:x30(0x00000000), imm:0x0, result rd:x18(0xa56363ce)
    # li  x30, MASK_XLEN(0x0)
    # li  x14, MASK_XLEN(0x8)
    # aes32esmi x18, x14, x30, 0x0
    # sw x18, 16(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x18, 0xa56363ce) 
inst_79:
    TEST_RRI_OP(aes32esmi, x18, x14, x30, 0x0, 0xa56363ce, 0x8, 0x0, x4, 16, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x18, 0xa56363ce) 





    # address for test results
    # la x1, test_17_res
    RVTEST_CASE(16,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_17_0)
 
    # Testcase 80:  rs1:x13(0x00000010), rs2:x29(0x00000000), imm:0x0, result rd:x19(0xa56363d6)
    # li  x29, MASK_XLEN(0x0)
    # li  x13, MASK_XLEN(0x10)
    # aes32esmi x19, x13, x29, 0x0
    # sw x19, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x19, 0xa56363d6) 
inst_80:
    TEST_RRI_OP(aes32esmi, x19, x13, x29, 0x0, 0xa56363d6, 0x10, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0xa56363d6) 

 
    # Testcase 81:  rs1:x12(0x00000020), rs2:x28(0x00000000), imm:0x0, result rd:x20(0xa56363e6)
    # li  x28, MASK_XLEN(0x0)
    # li  x12, MASK_XLEN(0x20)
    # aes32esmi x20, x12, x28, 0x0
    # sw x20, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x20, 0xa56363e6) 
inst_81:
    TEST_RRI_OP(aes32esmi, x20, x12, x28, 0x0, 0xa56363e6, 0x20, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0xa56363e6) 

 
    # Testcase 82:  rs1:x11(0x00000040), rs2:x27(0x00000000), imm:0x0, result rd:x21(0xa5636386)
    # li  x27, MASK_XLEN(0x0)
    # li  x11, MASK_XLEN(0x40)
    # aes32esmi x21, x11, x27, 0x0
    # sw x21, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x21, 0xa5636386) 
inst_82:
    TEST_RRI_OP(aes32esmi, x21, x11, x27, 0x0, 0xa5636386, 0x40, 0x0, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0xa5636386) 

 
    # Testcase 83:  rs1:x10(0x00000080), rs2:x26(0x00000000), imm:0x0, result rd:x22(0xa5636346)
    # li  x26, MASK_XLEN(0x0)
    # li  x10, MASK_XLEN(0x80)
    # aes32esmi x22, x10, x26, 0x0
    # sw x22, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x22, 0xa5636346) 
inst_83:
    TEST_RRI_OP(aes32esmi, x22, x10, x26, 0x0, 0xa5636346, 0x80, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xa5636346) 

 
    # Testcase 84:  rs1:x9(0x00000100), rs2:x25(0x00000000), imm:0x0, result rd:x23(0xa56362c6)
    # li  x25, MASK_XLEN(0x0)
    # li  x9, MASK_XLEN(0x100)
    # aes32esmi x23, x9, x25, 0x0
    # sw x23, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x23, 0xa56362c6) 
inst_84:
    TEST_RRI_OP(aes32esmi, x23, x9, x25, 0x0, 0xa56362c6, 0x100, 0x0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0xa56362c6) 





    # address for test results
    # la x1, test_18_res
    RVTEST_CASE(17,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_18_0)
 
    # Testcase 85:  rs1:x8(0x00000200), rs2:x24(0x00000000), imm:0x0, result rd:x24(0xa56361c6)
    # li  x24, MASK_XLEN(0x0)
    # li  x8, MASK_XLEN(0x200)
    # aes32esmi x24, x8, x24, 0x0
    # sw x24, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x24, 0xa56361c6) 
inst_85:
    TEST_RRI_OP(aes32esmi, x24, x8, x24, 0x0, 0xa56361c6, 0x200, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0xa56361c6) 

 
    # Testcase 86:  rs1:x7(0x00000400), rs2:x23(0x00000000), imm:0x0, result rd:x25(0xa56367c6)
    # li  x23, MASK_XLEN(0x0)
    # li  x7, MASK_XLEN(0x400)
    # aes32esmi x25, x7, x23, 0x0
    # sw x25, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x25, 0xa56367c6) 
inst_86:
    TEST_RRI_OP(aes32esmi, x25, x7, x23, 0x0, 0xa56367c6, 0x400, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0xa56367c6) 

 
    # Testcase 87:  rs1:x6(0x00000800), rs2:x22(0x00000000), imm:0x0, result rd:x26(0xa5636bc6)
    # li  x22, MASK_XLEN(0x0)
    # li  x6, MASK_XLEN(0x800)
    # aes32esmi x26, x6, x22, 0x0
    # sw x26, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x26, 0xa5636bc6) 
inst_87:
    TEST_RRI_OP(aes32esmi, x26, x6, x22, 0x0, 0xa5636bc6, 0x800, 0x0, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0xa5636bc6) 

 
    # Testcase 88:  rs1:x5(0x00001000), rs2:x21(0x00000000), imm:0x0, result rd:x27(0xa56373c6)
    # li  x21, MASK_XLEN(0x0)
    # li  x5, MASK_XLEN(0x1000)
    # aes32esmi x27, x5, x21, 0x0
    # sw x27, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x27, 0xa56373c6) 
inst_88:
    TEST_RRI_OP(aes32esmi, x27, x5, x21, 0x0, 0xa56373c6, 0x1000, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0xa56373c6) 

 
    # Testcase 89:  rs1:x4(0x00002000), rs2:x20(0x00000000), imm:0x0, result rd:x28(0xa56343c6)
    # li  x20, MASK_XLEN(0x0)
    # li  x4, MASK_XLEN(0x2000)
    # aes32esmi x28, x4, x20, 0x0
    # sw x28, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x28, 0xa56343c6) 
inst_89:
    TEST_RRI_OP(aes32esmi, x28, x4, x20, 0x0, 0xa56343c6, 0x2000, 0x0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x28, 0xa56343c6) 





    # address for test results
    # la x4, test_19_res
    RVTEST_CASE(18,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x4,signature_19_0)
 
    # Testcase 90:  rs1:x3(0x00004000), rs2:x19(0x00000000), imm:0x0, result rd:x29(0xa56323c6)
    # li  x19, MASK_XLEN(0x0)
    # li  x3, MASK_XLEN(0x4000)
    # aes32esmi x29, x3, x19, 0x0
    # sw x29, 0(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x29, 0xa56323c6) 
inst_90:
    TEST_RRI_OP(aes32esmi, x29, x3, x19, 0x0, 0xa56323c6, 0x4000, 0x0, x4, 0, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x29, 0xa56323c6) 

 
    # Testcase 91:  rs1:x2(0x00008000), rs2:x18(0x00000000), imm:0x0, result rd:x30(0xa563e3c6)
    # li  x18, MASK_XLEN(0x0)
    # li  x2, MASK_XLEN(0x8000)
    # aes32esmi x30, x2, x18, 0x0
    # sw x30, 4(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x30, 0xa563e3c6) 
inst_91:
    TEST_RRI_OP(aes32esmi, x30, x2, x18, 0x0, 0xa563e3c6, 0x8000, 0x0, x4, 4, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x30, 0xa563e3c6) 

 
    # Testcase 92:  rs1:x1(0x00010000), rs2:x17(0x00000000), imm:0x0, result rd:x31(0xa56263c6)
    # li  x17, MASK_XLEN(0x0)
    # li  x1, MASK_XLEN(0x10000)
    # aes32esmi x31, x1, x17, 0x0
    # sw x31, 8(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x31, 0xa56263c6) 
inst_92:
    TEST_RRI_OP(aes32esmi, x31, x1, x17, 0x0, 0xa56263c6, 0x10000, 0x0, x4, 8, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x31, 0xa56263c6) 

 
    # Testcase 93:  rs1:x31(0x00020000), rs2:x16(0x00000000), imm:0x0, result rd:x1(0xa56163c6)
    # li  x16, MASK_XLEN(0x0)
    # li  x31, MASK_XLEN(0x20000)
    # aes32esmi x1, x31, x16, 0x0
    # sw x1, 12(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x1, 0xa56163c6) 
inst_93:
    TEST_RRI_OP(aes32esmi, x1, x31, x16, 0x0, 0xa56163c6, 0x20000, 0x0, x4, 12, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x1, 0xa56163c6) 

 
    # Testcase 94:  rs1:x30(0x00040000), rs2:x15(0x00000000), imm:0x0, result rd:x2(0xa56763c6)
    # li  x15, MASK_XLEN(0x0)
    # li  x30, MASK_XLEN(0x40000)
    # aes32esmi x2, x30, x15, 0x0
    # sw x2, 16(x4)
    # RVTEST_IO_ASSERT_GPR_EQ(x5, x2, 0xa56763c6) 
inst_94:
    TEST_RRI_OP(aes32esmi, x2, x30, x15, 0x0, 0xa56763c6, 0x40000, 0x0, x4, 16, x5)
    RVMODEL_IO_ASSERT_GPR_EQ(x5, x2, 0xa56763c6) 





    # address for test results
    # la x1, test_20_res
    RVTEST_CASE(19,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_20_0)
 
    # Testcase 95:  rs1:x29(0x00080000), rs2:x14(0x00000000), imm:0x0, result rd:x3(0xa56b63c6)
    # li  x14, MASK_XLEN(0x0)
    # li  x29, MASK_XLEN(0x80000)
    # aes32esmi x3, x29, x14, 0x0
    # sw x3, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x3, 0xa56b63c6) 
inst_95:
    TEST_RRI_OP(aes32esmi, x3, x29, x14, 0x0, 0xa56b63c6, 0x80000, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x3, 0xa56b63c6) 

 
    # Testcase 96:  rs1:x28(0x00100000), rs2:x13(0x00000000), imm:0x0, result rd:x4(0xa57363c6)
    # li  x13, MASK_XLEN(0x0)
    # li  x28, MASK_XLEN(0x100000)
    # aes32esmi x4, x28, x13, 0x0
    # sw x4, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x4, 0xa57363c6) 
inst_96:
    TEST_RRI_OP(aes32esmi, x4, x28, x13, 0x0, 0xa57363c6, 0x100000, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x4, 0xa57363c6) 

 
    # Testcase 97:  rs1:x27(0x00200000), rs2:x12(0x00000000), imm:0x0, result rd:x5(0xa54363c6)
    # li  x12, MASK_XLEN(0x0)
    # li  x27, MASK_XLEN(0x200000)
    # aes32esmi x5, x27, x12, 0x0
    # sw x5, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x5, 0xa54363c6) 
inst_97:
    TEST_RRI_OP(aes32esmi, x5, x27, x12, 0x0, 0xa54363c6, 0x200000, 0x0, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x5, 0xa54363c6) 

 
    # Testcase 98:  rs1:x26(0x00400000), rs2:x11(0x00000000), imm:0x0, result rd:x6(0xa52363c6)
    # li  x11, MASK_XLEN(0x0)
    # li  x26, MASK_XLEN(0x400000)
    # aes32esmi x6, x26, x11, 0x0
    # sw x6, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x6, 0xa52363c6) 
inst_98:
    TEST_RRI_OP(aes32esmi, x6, x26, x11, 0x0, 0xa52363c6, 0x400000, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x6, 0xa52363c6) 

 
    # Testcase 99:  rs1:x25(0x00800000), rs2:x10(0x00000000), imm:0x0, result rd:x7(0xa5e363c6)
    # li  x10, MASK_XLEN(0x0)
    # li  x25, MASK_XLEN(0x800000)
    # aes32esmi x7, x25, x10, 0x0
    # sw x7, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x7, 0xa5e363c6) 
inst_99:
    TEST_RRI_OP(aes32esmi, x7, x25, x10, 0x0, 0xa5e363c6, 0x800000, 0x0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0xa5e363c6) 





    # address for test results
    # la x1, test_21_res
    RVTEST_CASE(20,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_21_0)
 
    # Testcase 100:  rs1:x24(0x01000000), rs2:x9(0x00000000), imm:0x0, result rd:x8(0xa46363c6)
    # li  x9, MASK_XLEN(0x0)
    # li  x24, MASK_XLEN(0x1000000)
    # aes32esmi x8, x24, x9, 0x0
    # sw x8, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x8, 0xa46363c6) 
inst_100:
    TEST_RRI_OP(aes32esmi, x8, x24, x9, 0x0, 0xa46363c6, 0x1000000, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0xa46363c6) 

 
    # Testcase 101:  rs1:x23(0x02000000), rs2:x8(0x00000000), imm:0x0, result rd:x9(0xa76363c6)
    # li  x8, MASK_XLEN(0x0)
    # li  x23, MASK_XLEN(0x2000000)
    # aes32esmi x9, x23, x8, 0x0
    # sw x9, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x9, 0xa76363c6) 
inst_101:
    TEST_RRI_OP(aes32esmi, x9, x23, x8, 0x0, 0xa76363c6, 0x2000000, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0xa76363c6) 

 
    # Testcase 102:  rs1:x22(0x04000000), rs2:x7(0x00000000), imm:0x0, result rd:x10(0xa16363c6)
    # li  x7, MASK_XLEN(0x0)
    # li  x22, MASK_XLEN(0x4000000)
    # aes32esmi x10, x22, x7, 0x0
    # sw x10, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x10, 0xa16363c6) 
inst_102:
    TEST_RRI_OP(aes32esmi, x10, x22, x7, 0x0, 0xa16363c6, 0x4000000, 0x0, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0xa16363c6) 

 
    # Testcase 103:  rs1:x21(0x08000000), rs2:x6(0x00000000), imm:0x0, result rd:x11(0xad6363c6)
    # li  x6, MASK_XLEN(0x0)
    # li  x21, MASK_XLEN(0x8000000)
    # aes32esmi x11, x21, x6, 0x0
    # sw x11, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x11, 0xad6363c6) 
inst_103:
    TEST_RRI_OP(aes32esmi, x11, x21, x6, 0x0, 0xad6363c6, 0x8000000, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0xad6363c6) 

 
    # Testcase 104:  rs1:x20(0x10000000), rs2:x5(0x00000000), imm:0x0, result rd:x12(0xb56363c6)
    # li  x5, MASK_XLEN(0x0)
    # li  x20, MASK_XLEN(0x10000000)
    # aes32esmi x12, x20, x5, 0x0
    # sw x12, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x12, 0xb56363c6) 
inst_104:
    TEST_RRI_OP(aes32esmi, x12, x20, x5, 0x0, 0xb56363c6, 0x10000000, 0x0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x12, 0xb56363c6) 





    # address for test results
    # la x5, test_22_res
    RVTEST_CASE(21,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x5,signature_22_0)
 
    # Testcase 105:  rs1:x19(0x20000000), rs2:x4(0x00000000), imm:0x0, result rd:x13(0x856363c6)
    # li  x4, MASK_XLEN(0x0)
    # li  x19, MASK_XLEN(0x20000000)
    # aes32esmi x13, x19, x4, 0x0
    # sw x13, 0(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x13, 0x856363c6) 
inst_105:
    TEST_RRI_OP(aes32esmi, x13, x19, x4, 0x0, 0x856363c6, 0x20000000, 0x0, x5, 0, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x13, 0x856363c6) 

 
    # Testcase 106:  rs1:x18(0x40000000), rs2:x3(0x00000000), imm:0x0, result rd:x14(0xe56363c6)
    # li  x3, MASK_XLEN(0x0)
    # li  x18, MASK_XLEN(0x40000000)
    # aes32esmi x14, x18, x3, 0x0
    # sw x14, 4(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x14, 0xe56363c6) 
inst_106:
    TEST_RRI_OP(aes32esmi, x14, x18, x3, 0x0, 0xe56363c6, 0x40000000, 0x0, x5, 4, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x14, 0xe56363c6) 

 
    # Testcase 107:  rs1:x17(0x80000000), rs2:x2(0x00000000), imm:0x0, result rd:x15(0x256363c6)
    # li  x2, MASK_XLEN(0x0)
    # li  x17, MASK_XLEN(0x80000000)
    # aes32esmi x15, x17, x2, 0x0
    # sw x15, 8(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x15, 0x256363c6) 
inst_107:
    TEST_RRI_OP(aes32esmi, x15, x17, x2, 0x0, 0x256363c6, 0x80000000, 0x0, x5, 8, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x15, 0x256363c6) 

 
    # Testcase 108:  rs1:x16(0x00000000), rs2:x1(0x00000000), imm:0x0, result rd:x16(0xa56363c6)
    # li  x1, MASK_XLEN(0x0)
    # li  x16, MASK_XLEN(0x0)
    # aes32esmi x16, x16, x1, 0x0
    # sw x16, 12(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x16, 0xa56363c6) 
inst_108:
    TEST_RRI_OP(aes32esmi, x16, x16, x1, 0x0, 0xa56363c6, 0x0, 0x0, x5, 12, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x16, 0xa56363c6) 

 
    # Testcase 109:  rs1:x15(0xfffffffe), rs2:x31(0x00000000), imm:0x0, result rd:x17(0x5a9c9c38)
    # li  x31, MASK_XLEN(0x0)
    # li  x15, MASK_XLEN(0xfffffffe)
    # aes32esmi x17, x15, x31, 0x0
    # sw x17, 16(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x17, 0x5a9c9c38) 
inst_109:
    TEST_RRI_OP(aes32esmi, x17, x15, x31, 0x0, 0x5a9c9c38, 0xfffffffe, 0x0, x5, 16, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x17, 0x5a9c9c38) 





    # address for test results
    # la x1, test_23_res
    RVTEST_CASE(22,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_23_0)
 
    # Testcase 110:  rs1:x14(0xfffffffd), rs2:x30(0x00000000), imm:0x0, result rd:x18(0x5a9c9c3b)
    # li  x30, MASK_XLEN(0x0)
    # li  x14, MASK_XLEN(0xfffffffd)
    # aes32esmi x18, x14, x30, 0x0
    # sw x18, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x18, 0x5a9c9c3b) 
inst_110:
    TEST_RRI_OP(aes32esmi, x18, x14, x30, 0x0, 0x5a9c9c3b, 0xfffffffd, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x5a9c9c3b) 

 
    # Testcase 111:  rs1:x13(0xfffffffb), rs2:x29(0x00000000), imm:0x0, result rd:x19(0x5a9c9c3d)
    # li  x29, MASK_XLEN(0x0)
    # li  x13, MASK_XLEN(0xfffffffb)
    # aes32esmi x19, x13, x29, 0x0
    # sw x19, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x19, 0x5a9c9c3d) 
inst_111:
    TEST_RRI_OP(aes32esmi, x19, x13, x29, 0x0, 0x5a9c9c3d, 0xfffffffb, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x5a9c9c3d) 

 
    # Testcase 112:  rs1:x12(0xfffffff7), rs2:x28(0x00000000), imm:0x0, result rd:x20(0x5a9c9c31)
    # li  x28, MASK_XLEN(0x0)
    # li  x12, MASK_XLEN(0xfffffff7)
    # aes32esmi x20, x12, x28, 0x0
    # sw x20, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x20, 0x5a9c9c31) 
inst_112:
    TEST_RRI_OP(aes32esmi, x20, x12, x28, 0x0, 0x5a9c9c31, 0xfffffff7, 0x0, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x20, 0x5a9c9c31) 

 
    # Testcase 113:  rs1:x11(0xffffffef), rs2:x27(0x00000000), imm:0x0, result rd:x21(0x5a9c9c29)
    # li  x27, MASK_XLEN(0x0)
    # li  x11, MASK_XLEN(0xffffffef)
    # aes32esmi x21, x11, x27, 0x0
    # sw x21, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x21, 0x5a9c9c29) 
inst_113:
    TEST_RRI_OP(aes32esmi, x21, x11, x27, 0x0, 0x5a9c9c29, 0xffffffef, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x5a9c9c29) 

 
    # Testcase 114:  rs1:x10(0xffffffdf), rs2:x26(0x00000000), imm:0x0, result rd:x22(0x5a9c9c19)
    # li  x26, MASK_XLEN(0x0)
    # li  x10, MASK_XLEN(0xffffffdf)
    # aes32esmi x22, x10, x26, 0x0
    # sw x22, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x22, 0x5a9c9c19) 
inst_114:
    TEST_RRI_OP(aes32esmi, x22, x10, x26, 0x0, 0x5a9c9c19, 0xffffffdf, 0x0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0x5a9c9c19) 





    # address for test results
    # la x1, test_24_res
    RVTEST_CASE(23,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_24_0)
 
    # Testcase 115:  rs1:x9(0xffffffbf), rs2:x25(0x00000000), imm:0x0, result rd:x23(0x5a9c9c79)
    # li  x25, MASK_XLEN(0x0)
    # li  x9, MASK_XLEN(0xffffffbf)
    # aes32esmi x23, x9, x25, 0x0
    # sw x23, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x23, 0x5a9c9c79) 
inst_115:
    TEST_RRI_OP(aes32esmi, x23, x9, x25, 0x0, 0x5a9c9c79, 0xffffffbf, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x23, 0x5a9c9c79) 

 
    # Testcase 116:  rs1:x8(0xffffff7f), rs2:x24(0x00000000), imm:0x0, result rd:x24(0x5a9c9cb9)
    # li  x24, MASK_XLEN(0x0)
    # li  x8, MASK_XLEN(0xffffff7f)
    # aes32esmi x24, x8, x24, 0x0
    # sw x24, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x24, 0x5a9c9cb9) 
inst_116:
    TEST_RRI_OP(aes32esmi, x24, x8, x24, 0x0, 0x5a9c9cb9, 0xffffff7f, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x24, 0x5a9c9cb9) 

 
    # Testcase 117:  rs1:x7(0xfffffeff), rs2:x23(0x00000000), imm:0x0, result rd:x25(0x5a9c9d39)
    # li  x23, MASK_XLEN(0x0)
    # li  x7, MASK_XLEN(0xfffffeff)
    # aes32esmi x25, x7, x23, 0x0
    # sw x25, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x25, 0x5a9c9d39) 
inst_117:
    TEST_RRI_OP(aes32esmi, x25, x7, x23, 0x0, 0x5a9c9d39, 0xfffffeff, 0x0, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x25, 0x5a9c9d39) 

 
    # Testcase 118:  rs1:x6(0xfffffdff), rs2:x22(0x00000000), imm:0x0, result rd:x26(0x5a9c9e39)
    # li  x22, MASK_XLEN(0x0)
    # li  x6, MASK_XLEN(0xfffffdff)
    # aes32esmi x26, x6, x22, 0x0
    # sw x26, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x26, 0x5a9c9e39) 
inst_118:
    TEST_RRI_OP(aes32esmi, x26, x6, x22, 0x0, 0x5a9c9e39, 0xfffffdff, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x26, 0x5a9c9e39) 

 
    # Testcase 119:  rs1:x5(0xfffffbff), rs2:x21(0x00000000), imm:0x0, result rd:x27(0x5a9c9839)
    # li  x21, MASK_XLEN(0x0)
    # li  x5, MASK_XLEN(0xfffffbff)
    # aes32esmi x27, x5, x21, 0x0
    # sw x27, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x27, 0x5a9c9839) 
inst_119:
    TEST_RRI_OP(aes32esmi, x27, x5, x21, 0x0, 0x5a9c9839, 0xfffffbff, 0x0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x27, 0x5a9c9839) 





    # address for test results
    # la x5, test_25_res
    RVTEST_CASE(24,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x5,signature_25_0)
 
    # Testcase 120:  rs1:x4(0xfffff7ff), rs2:x20(0x00000000), imm:0x0, result rd:x28(0x5a9c9439)
    # li  x20, MASK_XLEN(0x0)
    # li  x4, MASK_XLEN(0xfffff7ff)
    # aes32esmi x28, x4, x20, 0x0
    # sw x28, 0(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x28, 0x5a9c9439) 
inst_120:
    TEST_RRI_OP(aes32esmi, x28, x4, x20, 0x0, 0x5a9c9439, 0xfffff7ff, 0x0, x5, 0, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x28, 0x5a9c9439) 

 
    # Testcase 121:  rs1:x3(0xffffefff), rs2:x19(0x00000000), imm:0x0, result rd:x29(0x5a9c8c39)
    # li  x19, MASK_XLEN(0x0)
    # li  x3, MASK_XLEN(0xffffefff)
    # aes32esmi x29, x3, x19, 0x0
    # sw x29, 4(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x29, 0x5a9c8c39) 
inst_121:
    TEST_RRI_OP(aes32esmi, x29, x3, x19, 0x0, 0x5a9c8c39, 0xffffefff, 0x0, x5, 4, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x29, 0x5a9c8c39) 

 
    # Testcase 122:  rs1:x2(0xffffdfff), rs2:x18(0x00000000), imm:0x0, result rd:x30(0x5a9cbc39)
    # li  x18, MASK_XLEN(0x0)
    # li  x2, MASK_XLEN(0xffffdfff)
    # aes32esmi x30, x2, x18, 0x0
    # sw x30, 8(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x30, 0x5a9cbc39) 
inst_122:
    TEST_RRI_OP(aes32esmi, x30, x2, x18, 0x0, 0x5a9cbc39, 0xffffdfff, 0x0, x5, 8, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x30, 0x5a9cbc39) 

 
    # Testcase 123:  rs1:x1(0xffffbfff), rs2:x17(0x00000000), imm:0x0, result rd:x31(0x5a9cdc39)
    # li  x17, MASK_XLEN(0x0)
    # li  x1, MASK_XLEN(0xffffbfff)
    # aes32esmi x31, x1, x17, 0x0
    # sw x31, 12(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x31, 0x5a9cdc39) 
inst_123:
    TEST_RRI_OP(aes32esmi, x31, x1, x17, 0x0, 0x5a9cdc39, 0xffffbfff, 0x0, x5, 12, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x31, 0x5a9cdc39) 

 
    # Testcase 124:  rs1:x31(0xffff7fff), rs2:x16(0x00000000), imm:0x0, result rd:x1(0x5a9c1c39)
    # li  x16, MASK_XLEN(0x0)
    # li  x31, MASK_XLEN(0xffff7fff)
    # aes32esmi x1, x31, x16, 0x0
    # sw x1, 16(x5)
    # RVTEST_IO_ASSERT_GPR_EQ(x6, x1, 0x5a9c1c39) 
inst_124:
    TEST_RRI_OP(aes32esmi, x1, x31, x16, 0x0, 0x5a9c1c39, 0xffff7fff, 0x0, x5, 16, x6)
    RVMODEL_IO_ASSERT_GPR_EQ(x6, x1, 0x5a9c1c39) 





    # address for test results
    # la x1, test_26_res
    RVTEST_CASE(25,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_26_0)
 
    # Testcase 125:  rs1:x30(0xfffeffff), rs2:x15(0x00000000), imm:0x0, result rd:x2(0x5a9d9c39)
    # li  x15, MASK_XLEN(0x0)
    # li  x30, MASK_XLEN(0xfffeffff)
    # aes32esmi x2, x30, x15, 0x0
    # sw x2, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x2, 0x5a9d9c39) 
inst_125:
    TEST_RRI_OP(aes32esmi, x2, x30, x15, 0x0, 0x5a9d9c39, 0xfffeffff, 0x0, x1, 0, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x2, 0x5a9d9c39) 

 
    # Testcase 126:  rs1:x29(0xfffdffff), rs2:x14(0x00000000), imm:0x0, result rd:x3(0x5a9e9c39)
    # li  x14, MASK_XLEN(0x0)
    # li  x29, MASK_XLEN(0xfffdffff)
    # aes32esmi x3, x29, x14, 0x0
    # sw x3, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x3, 0x5a9e9c39) 
inst_126:
    TEST_RRI_OP(aes32esmi, x3, x29, x14, 0x0, 0x5a9e9c39, 0xfffdffff, 0x0, x1, 4, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x3, 0x5a9e9c39) 

 
    # Testcase 127:  rs1:x28(0xfffbffff), rs2:x13(0x00000000), imm:0x0, result rd:x4(0x5a989c39)
    # li  x13, MASK_XLEN(0x0)
    # li  x28, MASK_XLEN(0xfffbffff)
    # aes32esmi x4, x28, x13, 0x0
    # sw x4, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x4, 0x5a989c39) 
inst_127:
    TEST_RRI_OP(aes32esmi, x4, x28, x13, 0x0, 0x5a989c39, 0xfffbffff, 0x0, x1, 8, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x4, 0x5a989c39) 

 
    # Testcase 128:  rs1:x27(0xfff7ffff), rs2:x12(0x00000000), imm:0x0, result rd:x5(0x5a949c39)
    # li  x12, MASK_XLEN(0x0)
    # li  x27, MASK_XLEN(0xfff7ffff)
    # aes32esmi x5, x27, x12, 0x0
    # sw x5, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x5, 0x5a949c39) 
inst_128:
    TEST_RRI_OP(aes32esmi, x5, x27, x12, 0x0, 0x5a949c39, 0xfff7ffff, 0x0, x1, 12, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x5, 0x5a949c39) 

 
    # Testcase 129:  rs1:x26(0xffefffff), rs2:x11(0x00000000), imm:0x0, result rd:x6(0x5a8c9c39)
    # li  x11, MASK_XLEN(0x0)
    # li  x26, MASK_XLEN(0xffefffff)
    # aes32esmi x6, x26, x11, 0x0
    # sw x6, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x6, 0x5a8c9c39) 
inst_129:
    TEST_RRI_OP(aes32esmi, x6, x26, x11, 0x0, 0x5a8c9c39, 0xffefffff, 0x0, x1, 16, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x6, 0x5a8c9c39) 





    # address for test results
    # la x1, test_27_res
    RVTEST_CASE(26,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_27_0)
 
    # Testcase 130:  rs1:x25(0xffdfffff), rs2:x10(0x00000000), imm:0x0, result rd:x7(0x5abc9c39)
    # li  x10, MASK_XLEN(0x0)
    # li  x25, MASK_XLEN(0xffdfffff)
    # aes32esmi x7, x25, x10, 0x0
    # sw x7, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x7, 0x5abc9c39) 
inst_130:
    TEST_RRI_OP(aes32esmi, x7, x25, x10, 0x0, 0x5abc9c39, 0xffdfffff, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x7, 0x5abc9c39) 

 
    # Testcase 131:  rs1:x24(0xffbfffff), rs2:x9(0x00000000), imm:0x0, result rd:x8(0x5adc9c39)
    # li  x9, MASK_XLEN(0x0)
    # li  x24, MASK_XLEN(0xffbfffff)
    # aes32esmi x8, x24, x9, 0x0
    # sw x8, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x8, 0x5adc9c39) 
inst_131:
    TEST_RRI_OP(aes32esmi, x8, x24, x9, 0x0, 0x5adc9c39, 0xffbfffff, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x8, 0x5adc9c39) 

 
    # Testcase 132:  rs1:x23(0xff7fffff), rs2:x8(0x00000000), imm:0x3, result rd:x9(0x39da9c9c)
    # li  x8, MASK_XLEN(0x0)
    # li  x23, MASK_XLEN(0xff7fffff)
    # aes32esmi x9, x23, x8, 0x3
    # sw x9, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x9, 0x39da9c9c) 
inst_132:
    TEST_RRI_OP(aes32esmi, x9, x23, x8, 0x3, 0x39da9c9c, 0xff7fffff, 0x0, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x9, 0x39da9c9c) 

 
    # Testcase 133:  rs1:x22(0xfeffffff), rs2:x7(0x00000000), imm:0x3, result rd:x10(0x385a9c9c)
    # li  x7, MASK_XLEN(0x0)
    # li  x22, MASK_XLEN(0xfeffffff)
    # aes32esmi x10, x22, x7, 0x3
    # sw x10, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x10, 0x385a9c9c) 
inst_133:
    TEST_RRI_OP(aes32esmi, x10, x22, x7, 0x3, 0x385a9c9c, 0xfeffffff, 0x0, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x10, 0x385a9c9c) 

 
    # Testcase 134:  rs1:x21(0xfdffffff), rs2:x6(0x00000000), imm:0x3, result rd:x11(0x3b5a9c9c)
    # li  x6, MASK_XLEN(0x0)
    # li  x21, MASK_XLEN(0xfdffffff)
    # aes32esmi x11, x21, x6, 0x3
    # sw x11, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x11, 0x3b5a9c9c) 
inst_134:
    TEST_RRI_OP(aes32esmi, x11, x21, x6, 0x3, 0x3b5a9c9c, 0xfdffffff, 0x0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x11, 0x3b5a9c9c) 





    # address for test results
    # la x6, test_28_res
    RVTEST_CASE(27,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x6,signature_28_0)
 
    # Testcase 135:  rs1:x20(0xfbffffff), rs2:x5(0x00000000), imm:0x3, result rd:x12(0x3d5a9c9c)
    # li  x5, MASK_XLEN(0x0)
    # li  x20, MASK_XLEN(0xfbffffff)
    # aes32esmi x12, x20, x5, 0x3
    # sw x12, 0(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x12, 0x3d5a9c9c) 
inst_135:
    TEST_RRI_OP(aes32esmi, x12, x20, x5, 0x3, 0x3d5a9c9c, 0xfbffffff, 0x0, x6, 0, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x12, 0x3d5a9c9c) 

 
    # Testcase 136:  rs1:x19(0xf7ffffff), rs2:x4(0x00000000), imm:0x1, result rd:x13(0x949c395a)
    # li  x4, MASK_XLEN(0x0)
    # li  x19, MASK_XLEN(0xf7ffffff)
    # aes32esmi x13, x19, x4, 0x1
    # sw x13, 4(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x13, 0x949c395a) 
inst_136:
    TEST_RRI_OP(aes32esmi, x13, x19, x4, 0x1, 0x949c395a, 0xf7ffffff, 0x0, x6, 4, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x13, 0x949c395a) 

 
    # Testcase 137:  rs1:x18(0xefffffff), rs2:x3(0x00000000), imm:0x1, result rd:x14(0x8c9c395a)
    # li  x3, MASK_XLEN(0x0)
    # li  x18, MASK_XLEN(0xefffffff)
    # aes32esmi x14, x18, x3, 0x1
    # sw x14, 8(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x14, 0x8c9c395a) 
inst_137:
    TEST_RRI_OP(aes32esmi, x14, x18, x3, 0x1, 0x8c9c395a, 0xefffffff, 0x0, x6, 8, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x14, 0x8c9c395a) 

 
    # Testcase 138:  rs1:x17(0xdfffffff), rs2:x2(0x00000000), imm:0x3, result rd:x15(0x195a9c9c)
    # li  x2, MASK_XLEN(0x0)
    # li  x17, MASK_XLEN(0xdfffffff)
    # aes32esmi x15, x17, x2, 0x3
    # sw x15, 12(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x15, 0x195a9c9c) 
inst_138:
    TEST_RRI_OP(aes32esmi, x15, x17, x2, 0x3, 0x195a9c9c, 0xdfffffff, 0x0, x6, 12, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x15, 0x195a9c9c) 

 
    # Testcase 139:  rs1:x16(0xbfffffff), rs2:x1(0x00000000), imm:0x1, result rd:x16(0xdc9c395a)
    # li  x1, MASK_XLEN(0x0)
    # li  x16, MASK_XLEN(0xbfffffff)
    # aes32esmi x16, x16, x1, 0x1
    # sw x16, 16(x6)
    # RVTEST_IO_ASSERT_GPR_EQ(x7, x16, 0xdc9c395a) 
inst_139:
    TEST_RRI_OP(aes32esmi, x16, x16, x1, 0x1, 0xdc9c395a, 0xbfffffff, 0x0, x6, 16, x7)
    RVMODEL_IO_ASSERT_GPR_EQ(x7, x16, 0xdc9c395a) 





    # address for test results
    # la x1, test_29_res
    RVTEST_CASE(28,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_29_0)
 
    # Testcase 140:  rs1:x15(0x7fffffff), rs2:x31(0x00000000), imm:0x2, result rd:x17(0x1c395a9c)
    # li  x31, MASK_XLEN(0x0)
    # li  x15, MASK_XLEN(0x7fffffff)
    # aes32esmi x17, x15, x31, 0x2
    # sw x17, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x17, 0x1c395a9c) 
inst_140:
    TEST_RRI_OP(aes32esmi, x17, x15, x31, 0x2, 0x1c395a9c, 0x7fffffff, 0x0, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x17, 0x1c395a9c) 

 
    # Testcase 141:  rs1:x14(0xffffffff), rs2:x30(0x00000000), imm:0x0, result rd:x18(0x5a9c9c39)
    # li  x30, MASK_XLEN(0x0)
    # li  x14, MASK_XLEN(0xffffffff)
    # aes32esmi x18, x14, x30, 0x0
    # sw x18, 4(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x18, 0x5a9c9c39) 
inst_141:
    TEST_RRI_OP(aes32esmi, x18, x14, x30, 0x0, 0x5a9c9c39, 0xffffffff, 0x0, x1, 4, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x18, 0x5a9c9c39) 

 
    # Testcase 142:  rs1:x13(0x10fd3dedadea5195), rs2:x29(0xdf7f3844121bcc23), imm:0x2, result rd:x19(0x02afbb3a)
    # li  x29, MASK_XLEN(0xdf7f3844121bcc23)
    # li  x13, MASK_XLEN(0x10fd3dedadea5195)
    # aes32esmi x19, x13, x29, 0x2
    # sw x19, 8(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x19, 0x02afbb3a) 
inst_142:
    TEST_RRI_OP(aes32esmi, x19, x13, x29, 0x2, 0x02afbb3a, 0x10fd3dedadea5195, 0xdf7f3844121bcc23, x1, 8, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x19, 0x02afbb3a) 

 
    # Testcase 143:  rs1:x12(0xbd295ce2d2ffbec1), rs2:x28(0xf5adb41aa47d105b), imm:0x1, result rd:x0(0x00000000)
    # li  x28, MASK_XLEN(0xf5adb41aa47d105b)
    # li  x12, MASK_XLEN(0xbd295ce2d2ffbec1)
    # aes32esmi x0, x12, x28, 0x1
    # sw x0, 12(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x0, 0x00000000) 
inst_143:
    TEST_RRI_OP(aes32esmi, x0, x12, x28, 0x1, 0x00000000, 0xbd295ce2d2ffbec1, 0xf5adb41aa47d105b, x1, 12, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x0, 0x00000000) 

 
    # Testcase 144:  rs1:x11(0xc9649f05a8e1a8bb), rs2:x0(0x82f6747f707af2c0), imm:0x3, result rd:x21(0x6e44cbd8)
    # li  x0, MASK_XLEN(0x82f6747f707af2c0)
    # li  x11, MASK_XLEN(0xc9649f05a8e1a8bb)
    # aes32esmi x21, x11, x0, 0x3
    # sw x21, 16(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x21, 0x6e44cbd8) 
inst_144:
    TEST_RRI_OP(aes32esmi, x21, x11, x0, 0x3, 0x6e44cbd8, 0xc9649f05a8e1a8bb, 0x82f6747f707af2c0, x1, 16, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x21, 0x6e44cbd8) 





    # address for test results
    # la x1, test_30_res
    RVTEST_CASE(29,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*K.*);def TEST_CASE_1=True;",aes32esmi)
	RVTEST_SIGBASE(x1,signature_30_0)
 
    # Testcase 145:  rs1:x0(0x3541291848c99fcb), rs2:x26(0x73a92fd4e19bfbc3), imm:0x3, result rd:x22(0xeb13f8f8)
    # li  x26, MASK_XLEN(0x73a92fd4e19bfbc3)
    # li  x0, MASK_XLEN(0x3541291848c99fcb)
    # aes32esmi x22, x0, x26, 0x3
    # sw x22, 0(x1)
    # RVTEST_IO_ASSERT_GPR_EQ(x2, x22, 0xeb13f8f8) 
inst_145:
    TEST_RRI_OP(aes32esmi, x22, x0, x26, 0x3, 0xeb13f8f8, 0x3541291848c99fcb, 0x73a92fd4e19bfbc3, x1, 0, x2)
    RVMODEL_IO_ASSERT_GPR_EQ(x2, x22, 0xeb13f8f8) 



	
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
RVTEST_DATA_END

RVMODEL_DATA_BEGIN




signature_1_0:
	.fill 5, 4, 0xdeadbeef
signature_2_0:
	.fill 5, 4, 0xdeadbeef
signature_3_0:
	.fill 5, 4, 0xdeadbeef
signature_4_0:
	.fill 5, 4, 0xdeadbeef
signature_5_0:
	.fill 5, 4, 0xdeadbeef
signature_6_0:
	.fill 5, 4, 0xdeadbeef
signature_7_0:
	.fill 5, 4, 0xdeadbeef
signature_8_0:
	.fill 5, 4, 0xdeadbeef
signature_9_0:
	.fill 5, 4, 0xdeadbeef
signature_10_0:
	.fill 5, 4, 0xdeadbeef
signature_11_0:
	.fill 5, 4, 0xdeadbeef
signature_12_0:
	.fill 5, 4, 0xdeadbeef
signature_13_0:
	.fill 5, 4, 0xdeadbeef
signature_14_0:
	.fill 5, 4, 0xdeadbeef
signature_15_0:
	.fill 5, 4, 0xdeadbeef
signature_16_0:
	.fill 5, 4, 0xdeadbeef
signature_17_0:
	.fill 5, 4, 0xdeadbeef
signature_18_0:
	.fill 5, 4, 0xdeadbeef
signature_19_0:
	.fill 5, 4, 0xdeadbeef
signature_20_0:
	.fill 5, 4, 0xdeadbeef
signature_21_0:
	.fill 5, 4, 0xdeadbeef
signature_22_0:
	.fill 5, 4, 0xdeadbeef
signature_23_0:
	.fill 5, 4, 0xdeadbeef
signature_24_0:
	.fill 5, 4, 0xdeadbeef
signature_25_0:
	.fill 5, 4, 0xdeadbeef
signature_26_0:
	.fill 5, 4, 0xdeadbeef
signature_27_0:
	.fill 5, 4, 0xdeadbeef
signature_28_0:
	.fill 5, 4, 0xdeadbeef
signature_29_0:
	.fill 5, 4, 0xdeadbeef
signature_30_0:
	.fill 5, 4, 0xdeadbeef


#ifdef rvtest_mtrap_routine

mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*(XLEN/32),4,0xdeadbeef

#endif

RVMODEL_DATA_END
